name: enum

-- description
Returns a custom enum loader that only accepts one of the supplied choices.
The choices can be supplied as a simple array of strings, or an object where
the string keys represent the choices and their associated values the values
that should be returned by the loader instead of the input string.
-- description

# messages

enum_required:
de = Es kann nur einer der folgenden Werte angegeben werden:
en = Only one of the following values can be specified:
es = Solo se puede proporcionar uno de los siguientes valores:

# implementations

## javascript

-- code
choices => {
  if(Array.isArray(choices)) {
    return value => {
      value = value.trim();

      if(!choices.includes(value))
        throw `enum_required${choices.map(choice => "'" + choice + "'").join(', ')}.`;

      return value;
    };
  } else {
    return value => {
      value = value.trim();
      
      if(!choices.hasOwnProperty(value))
        throw `enum_required${Object.keys(choices).map(choice => "'" + choice + "'").join(', ')}.`;

      return choices[value];
    };
  }
}
-- code

> TODO: Prerequisite code for specs here:
> const language = enumFactory(['eno', 'json', 'yaml']);

specs:
'eno' = 'eno'
'json' = 'json'
'yaml' = 'yaml'
'YAML' =
'car' =
'13' =

## php

prelude:
- use \Exception;

-- code
public static function boolean($value) {
  $lower = strtolower(trim($value));

  if($lower === 'true') return true;
  if($lower === 'false') return false;
  if($lower === 'yes') return true;
  if($lower === 'no') return false;

  throw new Exception('boolean_required');
}
-- code

specs:
'true' = true
'false' = false
'yes' = true
'no' = false
'nope' =

## python

-- code
def boolean(value):
  lower = value.strip().lower()

  if lower == 'true':
    return True
  if lower == 'false':
    return False
  if lower == 'yes':
    return True
  if lower == 'no':
    return False

  raise ValueError('boolean_required')
-- code

specs:
'true' = True
'false' = False
'yes' = True
'no' = False
'nope' =

## ruby

-- code
def self.boolean(value)
  lower = value.strip.downcase

  return true if lower == 'true'
  return false if lower == 'false'
  return true if lower == 'yes'
  return false if lower == 'no'

  raise 'boolean_required'
end
-- code

specs:
'true' = true
'false' = false
'yes' = true
'no' = false
'nope' =
