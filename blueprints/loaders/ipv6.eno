name: ipv6

-- description
Accepts only IPv6 addresses, returns the validated adress as a string. 
-- description

# messages

ipv6_required:
de = Eine valide IPv6 Adresse ist erforderlich, zum Beispiel '2001:db8::'.
en = A valid IPv6 address is required, for instance '2001:db8::'.
es = Se requiere una valida direcciÃ³n IPv6, por ejemplo '2001:db8::'.

# implementations

## javascript

prelude:
- const IPV6_REGEX = /^\s*((\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3}))\s*$/;

-- code
value => {
  const match = IPV6_REGEX.exec(value);

  if(match) {
    const octet1 = parseInt(match[2]);
    const octet2 = parseInt(match[3]);
    const octet3 = parseInt(match[4]);
    const octet4 = parseInt(match[5]);
    
    if(octet1 >= 0 && octet1 <= 255 &&
       octet2 >= 0 && octet2 <= 255 &&
       octet3 >= 0 && octet3 <= 255 &&
       octet4 >= 0 && octet4 <= 255)
      return match[1];
  }

  throw 'ipv6_required';
}
-- code

specs:
`'::1'` = '::1'
`'2001:db8::'` = '2001:db8::'
`'0:0:0:0:0:0:0:0'` = '0:0:0:0:0:0:0:0'
`':::1'` = 
`'::0::1'` = 
'localhost' =
'0.0.0.0' =

## php

prelude:
- use \Exception;
- private const IPV6_REGEXP = '/^\s*((\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3}))\s*$/';

-- code
public static function ipv6($value) {
  $matched = preg_match(self::IPV6_REGEXP, $value, $match);

  if($matched) {
    $octet1 = intval($match[2]);
    $octet2 = intval($match[3]);
    $octet3 = intval($match[4]);
    $octet4 = intval($match[5]);
    
    if($octet1 >= 0 && $octet1 <= 255 &&
       $octet2 >= 0 && $octet2 <= 255 &&
       $octet3 >= 0 && $octet3 <= 255 &&
       $octet4 >= 0 && $octet4 <= 255)
      return $match[1];
  }

  throw new Exception('ipv6_required');
}
-- code

specs:
`'::1'` = '::1'
`'2001:db8::'` = '2001:db8::'
`'0:0:0:0:0:0:0:0'` = '0:0:0:0:0:0:0:0'
`':::1'` = 
`'::0::1'` = 
'localhost' =
'0.0.0.0' =

## python

prelude:
- import re
- IPV6_RE = re.compile(r'^\s*((\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3}))\s*$')

-- code
def ipv6(value):
  match = IPV6_RE.match(value)

  if (match and
      0 <= int(match.group(2)) <= 255 and
      0 <= int(match.group(3)) <= 255 and
      0 <= int(match.group(4)) <= 255 and
      0 <= int(match.group(5)) <= 255):
    return match.group(1)

  raise ValueError('ipv6_required')
-- code

specs:
`'::1'` = '::1'
`'2001:db8::'` = '2001:db8::'
`'0:0:0:0:0:0:0:0'` = '0:0:0:0:0:0:0:0'
`':::1'` = 
`'::0::1'` = 
'localhost' =
'0.0.0.0' =

## ruby

prelude:
- require 'ipaddr'

-- code
def self.ipv6(value)
  begin
    return value if IPAddr.new(value).ipv6?
  rescue IPAddr::Error => err
    # fall through
  end

  raise 'ipv6_required'
end
-- code

specs:
`'::1'` = '::1'
`'2001:db8::'` = '2001:db8::'
`'0:0:0:0:0:0:0:0'` = '0:0:0:0:0:0:0:0'
`':::1'` = 
`'::0::1'` = 
'localhost' =
'0.0.0.0' =
